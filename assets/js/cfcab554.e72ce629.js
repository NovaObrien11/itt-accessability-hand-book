"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[1508],{2737:(e,s,l)=>{l.r(s),l.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"developer/semantics/Forms","title":"Forms","description":"Use proper labels, group related fields, and make errors clear.","source":"@site/docs/developer/semantics/Forms.md","sourceDirName":"developer/semantics","slug":"/developer/semantics/Forms","permalink":"/itt-accessability-hand-book/docs/developer/semantics/Forms","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/developer/semantics/Forms.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"developerSidebar","previous":{"title":"Buttons","permalink":"/itt-accessability-hand-book/docs/developer/semantics/buttons"},"next":{"title":"Links","permalink":"/itt-accessability-hand-book/docs/developer/semantics/links"}}');var r=l(4848),i=l(8453);const a={sidebar_position:2},t="Forms",d={},o=[{value:"Labels",id:"labels",level:2},{value:"Required Fields",id:"required-fields",level:2},{value:"Error Messages",id:"error-messages",level:2},{value:"Fieldsets",id:"fieldsets",level:2},{value:"Pitfalls",id:"pitfalls",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"forms",children:"Forms"})}),"\n",(0,r.jsx)(s.p,{children:"Use proper labels, group related fields, and make errors clear."}),"\n",(0,r.jsx)(s.h2,{id:"labels",children:"Labels"}),"\n",(0,r.jsx)(s.p,{children:"Every input needs a label - no exceptions."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'\x3c!-- Good: Explicit label --\x3e\n<label for="email">Email Address</label>\n<input type="email" id="email" name="email" required>\n\n\x3c!-- Good: Implicit label --\x3e\n<label>\n  Email Address\n  <input type="email" name="email" required>\n</label>\n\n\x3c!-- Bad: Placeholder as label --\x3e\n<input type="email" placeholder="Email Address" name="email">\n'})}),"\n",(0,r.jsx)(s.h2,{id:"required-fields",children:"Required Fields"}),"\n",(0,r.jsx)(s.p,{children:"Mark required fields clearly for both visual and screen reader users."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'\x3c!-- Good: Multiple indicators --\x3e\n<label for="name">\n  Full Name <span aria-label="required">*</span>\n</label>\n<input type="text" id="name" name="name" required aria-describedby="name-error">\n'})}),"\n",(0,r.jsx)(s.h2,{id:"error-messages",children:"Error Messages"}),"\n",(0,r.jsx)(s.p,{children:"Link errors to their inputs and make them discoverable."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'\x3c!-- Good: Connected error --\x3e\n<label for="password">Password</label>\n<input type="password" id="password" aria-describedby="password-error" aria-invalid="true">\n<div id="password-error" role="alert">Password must be at least 8 characters</div>\n'})}),"\n",(0,r.jsx)(s.h2,{id:"fieldsets",children:"Fieldsets"}),"\n",(0,r.jsx)(s.p,{children:"Group related inputs, especially radio buttons and checkboxes."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'\x3c!-- Good: Grouped options --\x3e\n<fieldset>\n  <legend>Preferred Contact Method</legend>\n  <input type="radio" id="email" name="contact" value="email">\n  <label for="email">Email</label>\n  <input type="radio" id="phone" name="contact" value="phone">\n  <label for="phone">Phone</label>\n</fieldset>\n'})}),"\n",(0,r.jsx)(s.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"aria-label vs label"}),": Use ",(0,r.jsx)(s.code,{children:"<label>"})," for visible text, ",(0,r.jsx)(s.code,{children:"aria-label"})," only when no visible label exists"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Multiple labels"}),": One input, one label - don't use both ",(0,r.jsx)(s.code,{children:"<label>"})," and ",(0,r.jsx)(s.code,{children:"aria-label"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Generic error messages"}),': "Invalid input" tells users nothing useful']}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,l)=>{l.d(s,{R:()=>a,x:()=>t});var n=l(6540);const r={},i=n.createContext(r);function a(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);