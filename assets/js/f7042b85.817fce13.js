"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[8787],{6272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"developer/components/custom-buttons","title":"Custom Buttons","description":"Extend native button behavior, don\'t replace it.","source":"@site/docs/developer/components/custom-buttons.md","sourceDirName":"developer/components","slug":"/developer/components/custom-buttons","permalink":"/itt-accessability-hand-book/docs/developer/components/custom-buttons","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/developer/components/custom-buttons.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"developerSidebar","previous":{"title":"Screen Reader Testing","permalink":"/itt-accessability-hand-book/docs/developer/ScreenReader"},"next":{"title":"SVG Icons","permalink":"/itt-accessability-hand-book/docs/developer/components/svg-icons"}}');var s=t(4848),r=t(8453);const i={sidebar_position:1},a="Custom Buttons",c={},d=[{value:"Extend Native Props",id:"extend-native-props",level:2},{value:"Forward Refs",id:"forward-refs",level:2},{value:"Don&#39;t Over-Engineer",id:"dont-over-engineer",level:2},{value:"Pitfalls",id:"pitfalls",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"custom-buttons",children:"Custom Buttons"})}),"\n",(0,s.jsx)(n.p,{children:"Extend native button behavior, don't replace it."}),"\n",(0,s.jsx)(n.h2,{id:"extend-native-props",children:"Extend Native Props"}),"\n",(0,s.jsx)(n.p,{children:"Keep all native button functionality by extending the base element."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Extends native button\ninterface CustomButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary';\n  loading?: boolean;\n}\n\nconst CustomButton = React.forwardRef<HTMLButtonElement, CustomButtonProps>(\n  ({ variant = 'primary', loading, children, disabled, ...props }, ref) => {\n    return (\n      <button\n        ref={ref}\n        disabled={disabled || loading}\n        className={`btn btn-${variant}`}\n        {...props}\n      >\n        {loading ? 'Loading...' : children}\n      </button>\n    );\n  }\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"forward-refs",children:"Forward Refs"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"forwardRef"})," so parent components can access the underlying element."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Ref forwarding\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  return <button ref={ref} {...props} />;\n});\n\n// Usage: Parent can focus the button\nconst parent = () => {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  \n  const focusButton = () => {\n    buttonRef.current?.focus();\n  };\n  \n  return <Button ref={buttonRef}>Click me</Button>;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dont-over-engineer",children:"Don't Over-Engineer"}),"\n",(0,s.jsx)(n.p,{children:"Avoid custom props that duplicate native functionality."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Bad: Reinventing native props\ninterface BadButtonProps {\n  clickHandler: () => void;\n  isDisabled: boolean;\n  buttonText: string;\n}\n\n// Good: Use native props\ninterface GoodButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary';\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Not extending native props"}),": Breaks expected button behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom event handlers"}),": Use ",(0,s.jsx)(n.code,{children:"onClick"}),", not ",(0,s.jsx)(n.code,{children:"onPress"})," or ",(0,s.jsx)(n.code,{children:"clickHandler"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing forwardRef"}),": Parent components can't manage focus or access the element"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);