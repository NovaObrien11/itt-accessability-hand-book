"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[3410],{2177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"developer/components/component-patterns","title":"Component Patterns","description":"Keep it simple - extend native elements instead of reinventing them.","source":"@site/docs/developer/components/component-patterns.md","sourceDirName":"developer/components","slug":"/developer/components/component-patterns","permalink":"/itt-accessability-hand-book/docs/developer/components/component-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/developer/components/component-patterns.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"developerSidebar","previous":{"title":"SVG Icons","permalink":"/itt-accessability-hand-book/docs/developer/components/svg-icons"},"next":{"title":"Keyboard Navigation","permalink":"/itt-accessability-hand-book/docs/developer/keyboard-navigation"}}');var s=t(4848),i=t(8453);const r={sidebar_position:3},c="Component Patterns",l={},a=[{value:"The Golden Rule",id:"the-golden-rule",level:2},{value:"Composition Over Custom Props",id:"composition-over-custom-props",level:2},{value:"Polymorphic Components",id:"polymorphic-components",level:2},{value:"Pitfalls",id:"pitfalls",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"component-patterns",children:"Component Patterns"})}),"\n",(0,s.jsx)(n.p,{children:"Keep it simple - extend native elements instead of reinventing them."}),"\n",(0,s.jsx)(n.h2,{id:"the-golden-rule",children:"The Golden Rule"}),"\n",(0,s.jsx)(n.p,{children:"If it looks like a native element, it should behave like one."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Good: Extends native input\ninterface TextInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  error?: string;\n}\n\nconst TextInput: React.FC<TextInputProps> = ({ label, error, ...props }) => (\n  <div>\n    <label htmlFor={props.id}>{label}</label>\n    <input {...props} aria-invalid={!!error} />\n    {error && <p role="alert">{error}</p>}\n  </div>\n);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"composition-over-custom-props",children:"Composition Over Custom Props"}),"\n",(0,s.jsx)(n.p,{children:"Use children and composition instead of custom prop APIs."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Bad: Custom prop API\n<CustomCard \n  title="Card Title"\n  content="Card content"\n  buttonText="Click me"\n  onButtonClick={() => {}}\n/>\n\n// Good: Composition\n<Card>\n  <CardHeader>Card Title</CardHeader>\n  <CardContent>Card content</CardContent>\n  <CardActions>\n    <button onClick={() => {}}>Click me</button>\n  </CardActions>\n</Card>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"polymorphic-components",children:"Polymorphic Components"}),"\n",(0,s.jsx)(n.p,{children:"Let components render as different elements when needed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Polymorphic component\ninterface BoxProps<T extends React.ElementType = 'div'> {\n  as?: T;\n  children: React.ReactNode;\n}\n\nconst Box = <T extends React.ElementType = 'div'>({ \n  as, \n  children, \n  ...props \n}: BoxProps<T> & Omit<React.ComponentPropsWithoutRef<T>, keyof BoxProps>) => {\n  const Component = as || 'div';\n  return <Component {...props}>{children}</Component>;\n};\n\n// Usage: Same component, different semantics\n<Box as=\"section\">Section content</Box>\n<Box as=\"article\">Article content</Box>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom prop names"}),": Use ",(0,s.jsx)(n.code,{children:"onClick"})," not ",(0,s.jsx)(n.code,{children:"onPress"}),", ",(0,s.jsx)(n.code,{children:"disabled"})," not ",(0,s.jsx)(n.code,{children:"isDisabled"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reinventing native behavior"}),": Don't create ",(0,s.jsx)(n.code,{children:"onEnterPress"})," when ",(0,s.jsx)(n.code,{children:"onKeyDown"})," exists"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex prop APIs"}),": Simple composition is usually better than many props"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);