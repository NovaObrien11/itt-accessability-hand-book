"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[5689],{2808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"qa/automated-testing","title":"Automated Testing","description":"Testing Pyramid for Accessibility","source":"@site/docs/qa/automated-testing.md","sourceDirName":"qa","slug":"/qa/automated-testing","permalink":"/itt-accessability-hand-book/docs/qa/automated-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/qa/automated-testing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"qaSidebar","previous":{"title":"Testing Tools","permalink":"/itt-accessability-hand-book/docs/qa/testing-tools"},"next":{"title":"Manual Testing","permalink":"/itt-accessability-hand-book/docs/qa/manual-testing"}}');var s=n(4848),a=n(8453);const o={sidebar_position:2},r="Automated Testing",l={},c=[{value:"Testing Pyramid for Accessibility",id:"testing-pyramid-for-accessibility",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Tools for Automation",id:"tools-for-automation",level:2},{value:"axe-core",id:"axe-core",level:3},{value:"Pa11y",id:"pa11y",level:3},{value:"Lighthouse CI",id:"lighthouse-ci",level:3},{value:"What Automated Testing Misses",id:"what-automated-testing-misses",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"automated-testing",children:"Automated Testing"})}),"\n",(0,s.jsx)(t.h2,{id:"testing-pyramid-for-accessibility",children:"Testing Pyramid for Accessibility"}),"\n",(0,s.jsx)(t.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(t.p,{children:"Test individual components for accessibility:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Jest + @testing-library/jest-dom\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\n\nexpect.extend(toHaveNoViolations);\n\ntest('Button has no accessibility violations', async () => {\n  const { container } = render(<Button>Click me</Button>);\n  const results = await axe(container);\n  expect(results).toHaveNoViolations();\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(t.p,{children:"Test component interactions:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// Cypress accessibility testing\ncy.injectAxe();\ncy.checkA11y();\n\n// Test keyboard navigation\ncy.get('[data-testid=\"menu-button\"]').focus();\ncy.get('body').type('{enter}');\ncy.get('[role=\"menu\"]').should('be.visible');\n"})}),"\n",(0,s.jsx)(t.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# GitHub Actions example\n- name: Accessibility Tests\n  run: |\n    npm run test:a11y\n    npm run lighthouse:ci\n"})}),"\n",(0,s.jsx)(t.h2,{id:"tools-for-automation",children:"Tools for Automation"}),"\n",(0,s.jsx)(t.h3,{id:"axe-core",children:"axe-core"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"@axe-core/cli"})," - Command line testing"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"@axe-core/playwright"})," - Playwright integration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"cypress-axe"})," - Cypress integration"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"pa11y",children:"Pa11y"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Test single page\npa11y https://example.com\n\n# Test multiple pages\npa11y-ci --sitemap https://example.com/sitemap.xml\n"})}),"\n",(0,s.jsx)(t.h3,{id:"lighthouse-ci",children:"Lighthouse CI"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// lighthouserc.js\nmodule.exports = {\n  ci: {\n    collect: {\n      url: ['http://localhost:3000'],\n      numberOfRuns: 3,\n    },\n    assert: {\n      assertions: {\n        'categories:accessibility': ['error', { minScore: 0.9 }],\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(t.h2,{id:"what-automated-testing-misses",children:"What Automated Testing Misses"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Context and user experience"}),"\n",(0,s.jsx)(t.li,{children:"Complex user flows"}),"\n",(0,s.jsx)(t.li,{children:"Screen reader announcement quality"}),"\n",(0,s.jsx)(t.li,{children:"Cognitive load and confusion"}),"\n",(0,s.jsx)(t.li,{children:"Real-world usage patterns"}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);