"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[517],{905:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"developer/semantics/buttons","title":"Buttons","description":"Always use native buttons, never nest them, always label them, and always show focus.","source":"@site/docs/developer/semantics/buttons.md","sourceDirName":"developer/semantics","slug":"/developer/semantics/buttons","permalink":"/docs/developer/semantics/buttons","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/developer/semantics/buttons.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"developerSidebar","previous":{"title":"Semantics","permalink":"/docs/category/semantics"},"next":{"title":"Links","permalink":"/docs/developer/semantics/links"}}');var i=t(4848),l=t(8453);const o={sidebar_position:1},r="Buttons",c={},a=[{value:"Button Labels",id:"button-labels",level:2},{value:"Accessible Labels",id:"accessible-labels",level:3},{value:"Keyboard Accessibility",id:"keyboard-accessibility",level:2},{value:"Use the Type Attribute",id:"use-the-type-attribute",level:2},{value:"Contrast and Focus Styles",id:"contrast-and-focus-styles",level:2},{value:"Pitfalls",id:"pitfalls",level:2}];function d(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"buttons",children:"Buttons"})}),"\n",(0,i.jsx)(s.p,{children:"Always use native buttons, never nest them, always label them, and always show focus."}),"\n",(0,i.jsx)(s.h2,{id:"button-labels",children:"Button Labels"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<button>"})," labels should ",(0,i.jsx)(s.strong,{children:"not change dynamically"})," after render, unless the button\u2019s action or state actually changes (e.g., toggles, \u201cShow more\u201d \u2192 \u201cShow less\u201d)."]}),"\n",(0,i.jsx)(s.li,{children:"If you must update the label for a stateful button, make sure the change is clear and announced to assistive technologies."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"accessible-labels",children:"Accessible Labels"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Icon-only ",(0,i.jsx)(s.code,{children:"<button>"})," elements must use ",(0,i.jsx)(s.code,{children:"aria-label"})," so assistive tech can describe the action."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"keyboard-accessibility",children:"Keyboard Accessibility"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Native ",(0,i.jsx)(s.code,{children:"<button>"})," elements have keyboard accessibility built in\u2014",(0,i.jsx)(s.strong,{children:"don\u2019t reinvent the wheel."})]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"use-the-type-attribute",children:"Use the Type Attribute"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If a ",(0,i.jsx)(s.code,{children:"<button>"})," is inside a form, always set ",(0,i.jsx)(s.code,{children:'type="button"'})," unless you want ",(0,i.jsx)(s.code,{children:'type="submit"'})," or ",(0,i.jsx)(s.code,{children:'type="reset"'}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Why?"})," Default is ",(0,i.jsx)(s.code,{children:"submit"}),", which can break forms or confuse assistive tech."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"contrast-and-focus-styles",children:"Contrast and Focus Styles"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Buttons must have ",(0,i.jsx)(s.strong,{children:"visible focus outlines"})," (",(0,i.jsx)(s.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html",children:"WCAG 2.1 \u2013 2.4.7 Focus Visible"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:["Text on buttons must have ",(0,i.jsx)(s.strong,{children:"4.5:1 color contrast"})," (",(0,i.jsx)(s.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html",children:"WCAG 2.1 \u2013 1.4.3 Contrast (Minimum)"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:["Non-text button elements (borders, icons) must have ",(0,i.jsx)(s.strong,{children:"3:1 contrast"})," (",(0,i.jsx)(s.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html",children:"WCAG 2.1 \u2013 1.4.11 Non-text Contrast"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Why?"})," Users need to see what\u2019s focused and what the button does."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html",children:"WCAG \xa74.1.2 \u2013 Name, Role, Value"})}),"\n",(0,i.jsxs)(s.p,{children:["A common pitfall with buttons is ",(0,i.jsx)(s.strong,{children:"nesting interactive elements"}),"\u2014like placing a ",(0,i.jsx)(s.code,{children:"<button>"})," inside another ",(0,i.jsx)(s.code,{children:"<button>"}),". Think of a clickable card component that also contains a call-to-action button. This is a no-go for accessibility."]}),"\n",(0,i.jsxs)(s.p,{children:["For more on handling complex interactive cards, check this out:",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"https://livefront.com/writing/accessibility-dos-and-donts-for-interactive-cards/",children:"Accessibility Dos and Don\u2019ts for Interactive Cards"})]}),"\n",(0,i.jsxs)(s.p,{children:["While CSS can make elements appear visually nested, your HTML ",(0,i.jsx)(s.strong,{children:"must not"})," be structured this way.",(0,i.jsx)(s.br,{}),"\n","Nesting interactive elements breaks accessibility standards."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Why:"})," This violates WCAG 2.1 \u2013 4.1.2 Name, Role, Value, because assistive technologies can\u2019t accurately determine the name, role, and state of nested controls.",(0,i.jsx)(s.br,{}),"\n","For more info, see ",(0,i.jsx)(s.a,{href:"https://dequeuniversity.com/rules/axe/4.8/nested-interactive",children:"Deque: Nested Interactive Controls"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note:"})," Using a ",(0,i.jsx)(s.code,{children:"<div onClick={}>"})," to wrap a ",(0,i.jsx)(s.code,{children:"<button>"})," (like ",(0,i.jsx)(s.code,{children:"<div onClick={() => {}}><button></button></div>"}),") is also invalid. This is not semantic, and is still considered nested interactivity."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>r});var n=t(6540);const i={},l=n.createContext(i);function o(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);