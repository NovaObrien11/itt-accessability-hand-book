"use strict";(self.webpackChunkitt_accessibility_handbook=self.webpackChunkitt_accessibility_handbook||[]).push([[3756],{4578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developer/semantics/inputs","title":"Inputs","description":"Use the right input type and connect labels, errors, and descriptions properly.","source":"@site/docs/developer/semantics/inputs.md","sourceDirName":"developer/semantics","slug":"/developer/semantics/inputs","permalink":"/itt-accessability-hand-book/docs/developer/semantics/inputs","draft":false,"unlisted":false,"editUrl":"https://github.com/NovaObrien11/itt-accessability-hand-book/docs/developer/semantics/inputs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"developerSidebar","previous":{"title":"Tables","permalink":"/itt-accessability-hand-book/docs/developer/semantics/tables"},"next":{"title":"lists","permalink":"/itt-accessability-hand-book/docs/developer/semantics/lists"}}');var s=t(4848),r=t(8453);const a={},l="Inputs",o={},c=[{value:"Input Types",id:"input-types",level:2},{value:"Connecting Related Content",id:"connecting-related-content",level:2},{value:"Required vs Optional",id:"required-vs-optional",level:2},{value:"Pitfalls",id:"pitfalls",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"inputs",children:"Inputs"})}),"\n",(0,s.jsx)(n.p,{children:"Use the right input type and connect labels, errors, and descriptions properly."}),"\n",(0,s.jsx)(n.h2,{id:"input-types",children:"Input Types"}),"\n",(0,s.jsx)(n.p,{children:"Use specific input types - they provide better mobile keyboards and validation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- Good: Specific types --\x3e\n<input type="email" name="email">     \x3c!-- @ key on mobile --\x3e\n<input type="tel" name="phone">       \x3c!-- Number pad on mobile --\x3e\n<input type="url" name="website">     \x3c!-- .com key on mobile --\x3e\n<input type="number" name="age">      \x3c!-- Number input with spinners --\x3e\n<input type="date" name="birthday">   \x3c!-- Date picker --\x3e\n\n\x3c!-- Bad: Generic text for everything --\x3e\n<input type="text" name="email">\n<input type="text" name="phone">\n'})}),"\n",(0,s.jsx)(n.h2,{id:"connecting-related-content",children:"Connecting Related Content"}),"\n",(0,s.jsx)(n.p,{children:"Link inputs to their labels, errors, and help text."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- Good: Everything connected --\x3e\n<label for="password">Password</label>\n<input \n  type="password" \n  id="password" \n  aria-describedby="password-help password-error"\n  aria-invalid="true"\n>\n<p id="password-help">Must be at least 8 characters</p>\n<p id="password-error" role="alert">Password is too short</p>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"required-vs-optional",children:"Required vs Optional"}),"\n",(0,s.jsx)(n.p,{children:"Mark required fields clearly, or mark optional ones if most are required."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- Good: Clear requirement --\x3e\n<label for="name">\n  Full Name <span aria-label="required">*</span>\n</label>\n<input type="text" id="name" required>\n\n\x3c!-- Good: When most are required --\x3e\n<label for="nickname">Nickname <span>(optional)</span></label>\n<input type="text" id="nickname">\n'})}),"\n",(0,s.jsx)(n.h2,{id:"pitfalls",children:"Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing labels"}),": Every input needs a label, no exceptions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Placeholder as label"}),": Placeholders disappear when typing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generic input types"}),": Use specific types for better UX and validation"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);